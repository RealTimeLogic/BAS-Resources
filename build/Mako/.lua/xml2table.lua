local a=string.gsub;local b,c=string.find,string.sub;local d,e=string.match,string.rep;local f,g=string.len,string.format;local h=table.concat;local getmetatable,setmetatable=getmetatable,setmetatable;local tostring,pairs,next,type=tostring,pairs,next,type;local rawget=rawget;local i=function(j)return d(j,"^%s*(.-)%s*$")end;local k=function(l)l.namespace_t={["@default"]=nil}l.namestack={}l.stack={}l.doc={}l.node=l.doc;return l end;local m=function(l)l.namespace_t=nil;l.namestack=nil;l.stack=nil;l.doc=nil;l.node=nil end;local n={}INIT=function(l,...)return k(l or{})end;RESET=function(l,...)k(l)end;TERM=function(l,...)m(l)end;XML=function(l,o)l.doc.xml=o or{}end;local p={["xml"]=true,["xmlns"]=true}START_ELEMENT=function(n,q,o)local r;o=o or{}for s,t in pairs(o)do local u,v,w;if s=="xmlns"then w="@default"else u,v,w=b(s,"^xmlns:(.+)$")if w and p[w]then return"ERROR","Illegal namespace ("..w..")"end end;if w then if not r then r={[w]=t}namespace_t=setmetatable(r,{__index=namespace_t})else namespace_t[w]=t end end end;local x;for s,t in pairs(o)do local u,v,w,y=b(s,"^([^:]+):(.+)$")if w then if b(y,":",1,true)then return"ERROR","Illegal attribute name ("..s..")"end;if w~="xmlns"then local z=namespace_t[w]if not z then return"ERROR","Unknown attribute namespace ("..w..")"end;x=x or{}x[z.."^"..s]=t;x[y]=t end end end;if x then setmetatable(o,{__index=x})end;local A;local u,v,w,B=b(q,"^([^:]+):(.+)$")if w then if b(B,":",1,true)then return"ERROR","Illegal tag name ("..B..")"end;if not namespace_t then return"ERROR","namespace"end;A=namespace_t[w]if not A then return"ERROR","Unknown tag namespace ("..w..")"end end;local C=A or namespace_t["@default"]local D=C and B and C.."^"..B or q;local E={type="element",tag_name=q,local_name=B or q,namespace_prefix=w,namespace_ref=A,expanded_name=D,attributes=o,namespaces=namespace_t,sequence=#node}node[#node+1]=E;local F=node.elements;if F then F[#F+1]=E;F[q]=F[q]or E;if D~=q then F[D]=F[D]or E end else node.elements={E,[q]=E,[D]=E}end;stack[#stack+1]=node;if r then namestack[#namestack+1]=node end;node=E end;END_ELEMENT=function(n,q)node.text=node.text and h(node.text," ")if namestack[#namestack]==node then namespace_t=rawget(getmetatable(namespace_t),__index)namestack[#namestack]=nil end;node,stack[#stack]=stack[#stack],nil;if#stack==0 then return"DONE",n.doc end end;EMPTY_ELEMENT=function(l,q,G)local H,I,J=START_ELEMENT(l,q,G)if H then return H,I,J end;return END_ELEMENT(l,q)end;TEXT=function(l,K)if#K==0 then return end;local node=l.node;local L=node.text;if L then L[#L+1]=K else node.text={K}end;node[#node+1]={type="TEXT",value=K}end;CDATA=function(l,M)local node=l.node;node[#node+1]={type="CDATA",value=M}end;COMMENT=function(l,M)local node=l.node;node[#node+1]={type="COMMENT",value=M}end;PI=function(l,N,O)local node=l.node;node[#node+1]={type="PI",target=N,value=O}end;return n