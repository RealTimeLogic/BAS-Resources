local a=_G;local b=require("string")local c=require("math")local d=require("socket.core")local e=sockcompat;a.sockcompat=nil;function connect(f,g,h,i)local j,k=d.tcp()if not j then return nil,k end;if h then local l,k=j:bind(h,i,-1)if not l then return nil,k end end;local l,k=j:connect(f,g)if not l then return nil,k end;return j end;function bind(m,g,n)local j,k=d.tcp()if not j then return nil,k end;j:setoption("reuseaddr",true)local l,k=j:bind(m,g)if not l then return nil,k end;l,k=j:listen(n)if not l then return nil,k end;return j end;try=newtry()function choose(o)return function(p,q,r)if a.type(p)~="string"then p,q,r="default",p,q end;local s=o[p or"nil"]if not s then a.error("unknown key ("..a.tostring(p)..")",3)else return s(q,r)end end end;sourcet={}sinkt={}BLOCKSIZE=2048;sinkt["close-when-done"]=function(j)return a.setmetatable({getfd=function()return j:getfd()end,dirty=function()return j:dirty()end},{__call=function(self,t,k)if not t then j:close()return 1 else return j:send(t)end end})end;sinkt["keep-open"]=function(j)return a.setmetatable({getfd=function()return j:getfd()end,dirty=function()return j:dirty()end},{__call=function(self,t,k)if t then return j:send(t)else return 1 end end})end;sinkt["default"]=sinkt["keep-open"]sink=choose(sinkt)sourcet["by-length"]=function(j,u)return a.setmetatable({getfd=function()return j:getfd()end,dirty=function()return j:dirty()end},{__call=function()if u<=0 then return nil end;local v=c.min(d.BLOCKSIZE,u)local t,k=j:receive(v)if k then return nil,k end;u=u-b.len(t)return t end})end;sourcet["until-closed"]=function(j)local w;return a.setmetatable({getfd=function()return j:getfd()end,dirty=function()return j:dirty()end},{__call=function()if w then return nil end;local t,k,x=j:receive(d.BLOCKSIZE)if not k then return t elseif k=="closed"then j:close()w=1;return x else return nil,k end end})end;sourcet["default"]=sourcet["until-closed"]source=choose(sourcet)return e