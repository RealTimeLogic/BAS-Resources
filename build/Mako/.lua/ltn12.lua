local a=require("string")local b=require("table")local c=_G;local d={}filter={}source={}sink={}pump={}BLOCKSIZE=2048;_VERSION="LTN12 1.0.1"function filter.cycle(e,f,g)c.assert(e)return function(h)local i;i,f=e(f,h,g)return i end end;function filter.chain(...)local j={...}local k=#j;local l,m=1,1;local n=""return function(h)n=h and n;while true do if m==l then h=j[m](h)if h==""or l==k then return h elseif h then m=m+1 else l=l+1;m=l end else h=j[m](h or"")if h==""then m=m-1;h=n elseif h then if m==k then return h else m=m+1 end else c.error("filter returned inappropriate nil")end end end end end;local function o()return nil end;function source.empty()return o end;function source.error(p)return function()return nil,p end end;function source.file(q,r)if q then return function()local h=q:read(BLOCKSIZE)if not h then q:close()end;return h end else return source.error(r or"unable to open file")end end;function source.simplify(s)c.assert(s)return function()local h,t=s()s=t or s;if not h then return nil,t else return h end end end;function source.string(u)if u then local v=1;return function()local h=a.sub(u,v,v+BLOCKSIZE-1)v=v+BLOCKSIZE;if h~=""then return h else return nil end end else return source.empty()end end;function source.rewind(s)c.assert(s)local w={}return function(h)if not h then h=b.remove(w)if not h then return s()else return h end else b.insert(w,h)end end end;function source.chain(s,x)c.assert(s and x)local y,z="",""local A="feeding"local p;return function()if not z then c.error('source is empty!',2)end;while true do if A=="feeding"then y,p=s()if p then return nil,p end;z=x(y)if not z then if y then c.error('filter returned inappropriate nil')else return nil end elseif z~=""then A="eating"if y then y=""end;return z end else z=x(y)if z==""then if y==""then A="feeding"else c.error('filter returned ""')end elseif not z then if y then c.error('filter returned inappropriate nil')else return nil end else return z end end end end end;function source.cat(...)local j={...}local s=b.remove(j,1)return function()while s do local h,p=s()if h then return h end;if p then return nil,p end;s=b.remove(j,1)end end end;function sink.table(w)w=w or{}local x=function(h,p)if h then b.insert(w,h)end;return 1 end;return x,w end;function sink.simplify(B)c.assert(B)return function(h,p)local i,t=B(h,p)if not i then return nil,t end;B=t or B;return 1 end end;function sink.file(q,r)if q then return function(h,p)if not h then q:close()return 1 else return q:write(h)end end else return sink.error(r or"unable to open file")end end;local function C()return 1 end;function sink.null()return C end;function sink.error(p)return function()return nil,p end end;function sink.chain(x,B)c.assert(x and B)return function(h,p)if h~=""then local D=x(h)local E=h and""while true do local i,F=B(D,p)if not i then return nil,F end;if D==E then return 1 end;D=x(E)end else return 1 end end end;function pump.step(s,B)local h,G=s()local i,H=B(h,G)if h and i then return 1 else return nil,G or H end end;function pump.all(s,B,I)c.assert(s and B)I=I or pump.step;while true do local i,p=I(s,B)if not i then if p then return nil,p else return 1 end end end end;return d