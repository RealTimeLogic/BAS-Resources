local a,b,c=string.format,string.match,string.find;local d,e=string.gsub,string.char;local f,g=table.concat,table.insert;local assert,error,type,pairs,ipairs,next,pcall,setmetatable=assert,error,type,pairs,ipairs,next,pcall,setmetatable;local h,i,j=table.unpack,ba.deflate,ba.b64decode;local k=ba.loadfile;local l=ba.xmlrpc.iso8601;local m=ba.xmlrpc.base64;ba.xmlrpc=nil;local trace=trace;local tonumber=tonumber;local n=math and math.floor or nil;local o=require"xparser"local p=require"xml2table"local q=_G;local r={}iso8601=l;base64=m;local function s(t)trace("XML-RPC",t)error(t,0)end;local function u(v,w,t)if type(v)==w then return end;s(a("%s expected a %s, not a %s.",t or"",w,type(v)),3)end;local x;do local function y(z)if z.type=="CDATA"then return z.value end;if z.text then return z.text end;if z[1]then z=z[1]if z.value then return z.value end end;return""end;local A;local function B(z)local C={}for D,z in ipairs(z)do local E=z.elements;C[y(E.name)]=A(E.value)end;return C end;local function F(z)local C={}for D,z in ipairs(z.elements.data)do g(C,A(z))end;return C end;local function G(z)return tonumber(y(z))end;local H={base64=function(z)return j(y(z))end,boolean=function(z)z=y(z)return(z=="true"or z=="1")and true or false end,["dateTime.iso8601"]=function(z)z=y(z)local C=l(z,true)return C and C or z end,double=G,i4=G,int=G,["nil"]=function(z)return false end,string=function(z)return y(z)or""end,struct=B,array=F}H.value=H.string;A=function(z)val=z.value and(z.value[1].tag_name and z.value[1]or z.value)or z[1]if val.tag_name then return H[val.tag_name](val)end;return H[z.tag_name](z)end;x=function(I)local J={}local K=I.elements.methodCall.elements;local L=y(K.methodName)for D,z in ipairs(K.params)do g(J,A(z.elements))end;local M,N,O,P=c(L,"^([^.]+)%.(.+)$")if not O or not P then s(a("Invalid method name: %s",L))end;return O,P,J end end;local Q;do local R;local S;local T;if n then S=function(U)if U>0xFFFF or U~=n(U)then return a("<double>%f</double>",U)end;return a("<i4>%d</i4>",U)end else S=function(U)return a("<i4>%d</i4>",U)end end;do local V={["<"]="&lt;",[">"]="&gt;",["&"]="&amp;"}local W;for W=1,31 do V[e(W)]="&#"..W..";"end;local X="([\001-\031<>&])"T=function(Y)if c(Y,X)then return a("<string><![CDATA[%s]]></string>",Y)end;return a("<string>%s</string>",Y)end end;local function Z(C)for D,z in pairs(C)do if type(D)~="number"then return false end end;return true end;local function _(U)s(a("%s is not a valid XML-RPC type",type(U)))end;local a0={["number"]=S,["string"]=T,["boolean"]=function(U)return a("<boolean>%s</boolean>",U and"1"or"0")end,["table"]=function(U,a1)if a1[U]then return"<nil/>"end;a1[U]=true;local C={}if Z(U)then g(C,"<array><data>")for D,z in ipairs(U)do g(C,R(z,a1))end;g(C,"</data></array>")else g(C,"<struct>")for D,z in pairs(U)do g(C,a("<member><name>%s</name>%s</member>",D,R(z,a1)))end;g(C,"</struct>")end;return f(C)end,["function"]=function(U)local M,a2,a3=pcall(U)if a3=="XMLRPC"then return a2 end;_(U)end}R=function(U,a1)local a4=a0[type(U)]if a4 then return a("<value>%s</value>",a4(U,a1))end;_(U)end;Q=function(a5)local a1={}return a('%s%s%s','<?xml version="1.0"?><methodResponse><params><param>',R(a5,a1),'</param></params></methodResponse>')end end;local function a6(a7)local a8=o.create(p,{},"SKIPBLANK")local a4=a7:rawrdr()local I,a9,aa;for ab in a4 do if not I then a9,aa=a8:parse(ab)if a9=="DONE"then I=aa elseif a9~=true then s(a("XML syntax error: %s",aa))end end end;a8:destroy()if not I then s"Premature end of XML"end;return I end;local ac={__index={}}function ac.__index:execute(a7,ad)assert(a7)assert(ad)self.request=a7;self.response=ad;local M,I=pcall(a6,a7)if M then local M,ae,af,J=pcall(x,I)I=nil;if M then local O=ae and self.intf[ae]or self.intf;local P;if O then P=O[af]end;if P then local ag,ah,ai;M,ag,ah,ai=pcall(P,h(J))if M and ag~=nil then self:sendResp(ag)elseif M then if type(ah)=="number"then self:sendError(ah,ai)else self:sendError(0,a("No response from %s",af))end else self:sendError(0,a("%s: %s",af,ag))end else local aj=true;if ae=="system"then if af=="listMethods"then self:doSystemDescribe()elseif af=="methodSignature"then self:sendResp("undef")elseif af=="methodHelp"then self:sendResp("")else aj=false end else aj=false end;if not aj then af=a("%s.%s",ae,af)local t=a("Cannot find method: %s",af)self:sendError(0,t)end end else self.response:setstatus(200)local t=a("Semanantic error %s",ae)self:sendError(0,t)end else self.response:setstatus(200)local t="Read error: "..I;self:sendError(0,t)end end;function ac.__index:doSystemDescribe()assert(self.request)local ak={"system.listMethods"}for ae,O in pairs(self.intf)do if type(O)=="function"then g(ak,a("%s",ae))else for af,N in pairs(O)do g(ak,a("%s.%s",ae,af))end end end;self:sendResp(ak)end;local function al(am,an,ao)an:reset()if#ao>1400 then local ap=am:header("Accept-Encoding")if ap and ap:find("deflate")then an:setheader("Content-Encoding","deflate")ao=i(ao)end end;an:setcontenttype("text/xml")an:setheader("Cache-Control","no-store, no-cache, must-revalidate")an:setheader("Content-Length",#ao)an:send(ao)end;function ac.__index:sendError(aa,t)local aq=[[<?xml version="1.0"?><methodResponse><fault><value><struct><member><name>faultCode</name><value><int>%d</int></value></member><member><name>faultString</name><value><string>%s</string></value></member></struct></value></fault></methodResponse>]]if not t then t="(unknown)"end;trace("XML-RPC",t)al(self.request,self.response,a(aq,aa,t))end;function ac.__index:sendResp(ar)al(self.request,self.response,Q(ar))end;new=function(as,O)function checkIntf(W,at)local au=0;for N,a4 in next,W do u(a4,"function",at and at..": "or"")au=au+1 end;assert(au~=0,a("Table '%s' is empty",at and at or""))end;u(O,"table","Argument: ")local av=0;for at,W in pairs(O)do av=av+1;if type(W)=="function"then checkIntf(O)av=1;break end;u(W,"table",at..": ")checkIntf(W,at)end;assert(av~=0,"Interface table is empty")return setmetatable({intf=O,name=as},ac)end;return r