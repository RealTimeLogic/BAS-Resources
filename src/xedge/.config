local vmio,dio=ba.openio"vm",ba.openio"disk"
local xinit,onunload=vmio:dofile(".lua/xedge.lua")
local fmt,log,cRwCfgFile=string.format,xedge.log
local symmetric=ba.crypto.symmetric

-----------  Code for opening server listen ports -----------------
local function printListenPort(con,port,cfg)
   if con then
   log("%server listening on IPv%d port %d",
       cfg.shark and "SharkSSL s" or "S",
       cfg.ipv6 and 6 or 4,port)
   end
end

-- Find out what IPv4 server port numbers are available
local function findListenSocket(prefPort,startPort,endPort)
   local bind=ba.socket.bind
   local port=prefPort
   local s,e=bind(port)
   if not s then
      port=startPort
      while port <= endPort do
	 s,e=bind(port)
	 if s then break end
	 port=port+1
      end
   end
   if s then
      s:close()
      return port
   end
   error(fmt("Cannot open server listen port using any of %d,%d - %d: %s",
	     prefPort,startPort,endPort,e))
end

local function cfgIo(key)
   local rw=require"rwfile"
   local jencode,jdecode=ba.json.encode,ba.json.decode
   local cfgname="xcfg.bin"
   local function fRwCfgFile(cdata)
      local ok,err
      if not cdata then
	 cdata,err=rw.file(dio,cfgname)
	 log("Configuration file: %s: %s",
	     dio:realpath(cfgname),cdata and "loaded" or err)
	 return cdata
      end
      ok,err=rw.file(dio,cfgname,cdata)
      if not ok then
	 log("Cannot save %s: %s",dio:realpath(cfgname),err)
      end
      return ok
   end
   local function enc(cfg)
      local iv=ba.rndbs(12)
      local gcmEnc=symmetric("GCM",key,iv)
      local cipher,tag=gcmEnc:encrypt(jencode(cfg),"PKCS7")
      return iv..tag..cipher
   end
   local function dec(cdata)
      local cfg
      if cdata then
	 local iv=cdata:sub(1,12)
	 local tag=cdata:sub(13,28)
         local gcmDec
         pcall(function() gcmDec=symmetric("GCM",key,iv) end)
         if gcmDec then
            pcall(function() cfg=jdecode(gcmDec:decrypt(cdata:sub(29,-1),tag,"PKCS7")) end)
         end
	 if not cfg then tracep(false,1,"configuration file corrupt") end
      end
      return cfg
   end
   if dio and cRwCfgFile then
      return function(cfg)
	 local cdata
	 if cfg then
	    cdata=enc(cfg)
	    cRwCfgFile(cdata)
	    fRwCfgFile(cdata)
	    return
	 end
	 cdata=cRwCfgFile()
	 cfg=dec(cdata)
	 if cfg then
	    fRwCfgFile(cdata)
	 else
	    cdata=fRwCfgFile()
	    cfg=dec(cdata)
	    if cfg then cRwCfgFile(cdata) end
	 end
	 return cfg
      end
   end
   if dio then
      return function(cfg)
	 if cfg then
	    fRwCfgFile(enc(cfg))
	    return
	 end
	 return dec(fRwCfgFile())
      end
   end
   if cRwCfgFile then
      return function(cfg)
	 if cfg then
	    cRwCfgFile(enc(cfg))
	    return
	 end
	 return dec(cRwCfgFile())
      end
   end
end

local function run(gpkey,upkey)
   local port=findListenSocket(80,9357,9370)
   local sport=findListenSocket(443,9443,9460)
   -- Save port numbers: may be useful to for example LSP pages
   ba.serverport=port
   ba.serversslport=sport
   -- Open IPv4 and IPv6 if available. We typically have IPv4 and IPv6 if
   -- we open an IPv6 port, thus we start by attempting to open an IPv6 port.
   local cfg={ipv6=true}
   ba.lcon6=ba.create.servcon(port,cfg)
   printListenPort(ba.lcon6,port,cfg)
   -- In case IPv4 is not opened by IPv6 binding or opening IPv6 fails.
   ba.lcon=ba.create.servcon(port)
   printListenPort(ba.lcon6 or ba.lcon,port,{})
   -- Open secure connection -- i.e. HTTPS
   local certf=".certificate/device_RSA_2048.%s"
   local cert,err=ba.create.sharkcert(
      vmio,fmt(certf,"pem"),fmt(certf,"key"),"sharkssl")
   if cert then
      local shark=ba.create.sharkssl(nil,{server=true})
      shark:addcert(cert)
      cfg.shark=shark
      ba.slcon6=ba.create.servcon(sport,cfg)
      printListenPort(ba.slcon6,sport,cfg)
      -- In case IPv4 is not opened by IPv6 binding or opening IPv6 fails
      cfg.ipv6=false
      ba.slcon=ba.create.servcon(sport,cfg)
      printListenPort(ba.slcon6 or ba.slcon,sport,cfg)
   else
      log("Cannot open certificate or private key. SSL not enabled: %s",err)
   end
   local tpmSharkcert=vmio:dofile".lua/tpm.lua"(gpkey,upkey)
   if dio then
      local rw=require"rwfile"
      -- "acme/bot" API: Load cert(s) and key(s) whose file names are
      -- listed in the associative array as: keys,certs.
      local function installcerts(keys,certs)
	 local cert,err
	 local shark=ba.create.sharkssl(nil,{server=true})
	 for ix,keyfile in ipairs(keys) do
	    local certfile=certs[ix]
	    local certd,keyd=rw.file(dio,certfile),rw.file(dio,keyfile)
	    if certd and keyd then
	       local op=ba.json.decode(keyd)
	       if op then
		  if "string" == type(op.keyname) then
		     cert,err=tpmSharkcert(op,certd)
		  else
		     log("File %s corrupt",dio:realpath(keyfile))
		     err="corrupt"
		  end
	       else
		  cert,err=ba.create.sharkcert(certd,keyd)
	       end
	       log("Loading %s : %s: %s %s",
		   keyfile,certfile,cert and "OK" or "FAILED",cert and "" or err)
	    else
	       log("Cannot load",dio:realpath(certd and keyfile or certfile))
	    end
	    if cert then shark:addcert(cert) end
	 end
	 local cfg={shark=shark}
	 -- Reload without shutting down server listen sockets.
	 if cert then
	    if ba.slcon then ba.slcon=ba.create.servcon(ba.slcon,cfg) end
	    if ba.slcon6 then ba.slcon6=ba.create.servcon(ba.slcon6,cfg) end
	 end
      end
      require"acme/bot".init(dio,installcerts) -- Configure
   end
   local t=ba.create.tracelogger()
   t:configure{priority=9}
   -- cfgIo: base it on global key so xedge.conf can be transferred between devices.
   xinit(vmio,cfgIo(ba.crypto.hash("sha256")(gpkey)(true)),t)
   require"acme/log".setlog(function(isErr,msg)
      xedge.elog({flush=isErr,ts=true},"%s",msg)
   end)
end


local klist,tins={},table.insert
local function start()
   local maxHash=pcall(function() ba.crypto.hash("sha512") end) and "sha512" or "sha256"
   local hf=ba.crypto.hash(maxHash)
   for _,k in ipairs(klist) do hf(k) end
   run(ba.crypto.hash(maxHash)(klist[1])(true),hf(true))
   run,klist=nil,nil
end

local function init(x)
   if "function" == type(x) then
      assert(nil==cRwCfgFile)
      cRwCfgFile=x
   elseif true == x then
      start()
   elseif not x then
      tins(klist,"X")
      start()
   else
      assert("string"==type(x))
      tins(klist,x)
   end
end
return init,onunload
