local fmt=string.format
local vmio=ba.openio"vm"
local log
local dio = ba.openio"disk"

-----------  Code for opening server listen ports -----------------
local function printListenPort(con,port,cfg)
   if con then
   log("%server listening on IPv%d port %d",
       cfg.shark and "SharkSSL s" or "S",
       cfg.ipv6 and 6 or 4, port)
   end
end

-- Find out what IPv4 server port numbers are available
local function findListenSocket(prefPort, startPort, endPort)
   local bind=ba.socket.bind
   local port=prefPort
   local s,e=bind(port)
   if not s then
      port = startPort
      while port <= endPort do
	 s,e=bind(port)
	 if s then break end
	 port=port+1
      end
   end
   if s then
      s:close()
      return port
   end
   error(fmt("Cannot open server listen port using any of %d, %d - %d: %s",
	     prefPort, startPort, endPort,e))
end

function _XedgeEvent() end -- Required at startup; changed in .lua/xedge.lua

local function run()
   log=xedge.log
   local port=findListenSocket(80,9357,9370)
   local sport=findListenSocket(443,9443,9460)
   -- Save port numbers: may be useful to for example LSP pages
   ba.serverport=port
   ba.serversslport=sport
   -- Open IPv4 and IPv6 if available. We typically have IPv4 and IPv6 if
   -- we open an IPv6 port, thus we start by attempting to open an IPv6 port.
   local cfg={ipv6=true}
   ba.lcon6=ba.create.servcon(port, cfg)
   printListenPort(ba.lcon6, port, cfg)
   -- In case IPv4 is not opened by IPv6 binding or opening IPv6 fails.
   ba.lcon=ba.create.servcon(port)
   printListenPort(ba.lcon6 or ba.lcon, port, {})
   -- Open secure connection -- i.e. HTTPS
   local certf=".certificate/device_RSA_2048.%s"
   local cert,err=ba.create.sharkcert(
      vmio, fmt(certf,"pem"), fmt(certf,"key"), "sharkssl")
   if cert then
      local shark=ba.create.sharkssl(store,{server=true})
      shark:addcert(cert)
      cfg.shark=shark
      ba.slcon6=ba.create.servcon(sport, cfg)
      printListenPort(ba.slcon6,sport, cfg)
      -- In case IPv4 is not opened by IPv6 binding or opening IPv6 fails
      cfg.ipv6=false
      ba.slcon=ba.create.servcon(sport,cfg)
      printListenPort(ba.slcon6 or ba.slcon, sport, cfg)
   else
      log("Cannot open certificate or private key. SSL not enabled: %s", err)
   end
   if dio then
      local rw=require"rwfile"
      local tpmSharkcert -- From TPM module
      -- "acme/bot" API: Load cert(s) and key(s) whose file names are
      -- listed in the associative array as: keys,certs.
      local function installcerts(keys,certs)
	 local cert,err
	 local shark=ba.create.sharkssl(nil,{server=true})
	 for ix,keyfile in ipairs(keys) do
	    local certfile=certs[ix]
	    local certd,keyd=rw.file(dio,certfile),rw.file(dio,keyfile)
	    if certd and keyd then
	       local op=ba.json.decode(keyd)
	       if op then
		  if "string" == type(op.keyname) then
		     cert,err=tpmSharkcert(op,certd)
		  else
		     log("File %s corrupt",dio:realpath(keyfile))
		     err="corrupt"
		  end
	       else
		  cert,err=ba.create.sharkcert(certd,keyd)
	       end
	       log("Loading %s : %s: %s %s",
		   keyfile,certfile,cert and "OK" or "FAILED",cert and "" or err)
	    else
	       log("Cannot load",dio:realpath(certd and keyfile or certfile))
	    end
	    if cert then shark:addcert(cert) end
	 end
	 local cfg = {shark=shark}
	 -- Reload without shutting down server listen sockets.
	 if cert then
	    if ba.slcon then ba.slcon = ba.create.servcon(ba.slcon,cfg) end
	    if ba.slcon6 then ba.slcon6 = ba.create.servcon(ba.slcon6,cfg) end
	 end
      end
      local t=ba.create.tracelogger()
      t:configure{priority=9}
      xedge.tldir=t
      local ios=ba.io()
      ios.vm=nil
      for name,io in pairs(ios) do
	 local type=io:resourcetype()
	 if "net" ~= type then
	    if io:stat"boot.lua" then xedge.loadAndRunLua(io,"boot.lua", _ENV) end
	 end
      end
      local cfgio,cfgname=dio,"xedge.conf"
      function xedge.saveCfg()
	 if not cfgio then return end
	 local ok,err= rw.json(cfgio, cfgname, xedge.cfg)
	 if not ok then
	    log("Cannot save %s: %s",cfgio:realpath(cfgname),err)
	 end
      end
      -- Load and start apps in config file
      local cfg,err=rw.json(cfgio,cfgname)
      log("Configuration file: %s: %s",
	  cfgio:realpath(cfgname), cfg and "loaded" or err)
      cfg = cfg or {apps={}}
      tpmSharkcert=xedge.init(cfg,vmio)
      require"acme/bot".init(dio,installcerts) -- Configure
   else
      xedge.init({apps={}},vmio)
   end
   require"acme/log".setlog(function(isErr, msg)
      xedge.elog({flush=isErr,ts=true},"%s",msg)
   end)
end

local setkey
local function startServer(key)
   if not setkey then
      setkey=vmio:dofile(".lua/xedge.lua", _ENV)
      setkey(key)
      if not key then run() end
   elseif true == key then
      setkey(true)
      run()
   end
end

return startServer,function() xedge.onunload() end
